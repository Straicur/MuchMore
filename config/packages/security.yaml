security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\Employee: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Employee
                property: email
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: security.credentials.password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            logout:
                path: api_token_invalidate
            pattern: ^/api
            stateless: true
            entry_point: jwt
            json_login:
                check_path: login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        register:
            pattern: ^/api/register
            stateless: true
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/(login|token/refresh), roles: PUBLIC_ACCESS }
        - { path: ^/api/token/invalidate, roles: PUBLIC_ACCESS }
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/author/books/, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/author/book/add, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/author/book/edit, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/author/book/delete, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/user/books/, roles: PUBLIC_ACCESS }
        - { path: ^/api/user/book/detail, roles: PUBLIC_ACCESS }
        - { path: ^/api/user/book/opinion/add, roles: PUBLIC_ACCESS }
when@test:
    security:
        password_hashers:
            App\Entity\Employee:
                algorithm: plaintext